{"version":3,"sources":["components/Button/Button.module.css","components/TaskCounter/TaskCounter.module.css","components/TaskForm/TaskForm.module.css","components/TaskList/TaskList.module.css","components/Layout/Layout.module.css","components/StatusFilter/StatusFilter.module.css","components/Layout/Layout.js","components/Button/Button.js","redux/constants.js","redux/selectors.js","components/StatusFilter/StatusFilter.js","redux/actions.js","components/TaskCounter/TaskCounter.js","components/AppBar/AppBar.js","components/TaskForm/TaskForm.js","components/Task/Task.js","components/TaskList/TaskList.js","components/App.js","redux/reducer.js","redux/store.js","index.js","components/AppBar/AppBar.module.css","components/Task/Task.module.css"],"names":["module","exports","Layout","children","className","css","container","Button","selected","type","otherProps","clsx","btn","isSelected","statusFilters","Object","freeze","all","active","completed","getTasks","state","tasks","getStatusFilter","filters","status","StatusFilter","dispatch","useDispatch","filter","useSelector","handleFilterChange","payload","wrapper","onClick","TaskCounter","count","reduce","acc","task","text","AppBar","section","title","TaskForm","form","onSubmit","event","preventDefault","target","elements","value","id","nanoid","reset","field","name","placeholder","Task","checkbox","checked","onChange","size","TaskList","visibleTasks","statusFilter","getVisibleTasks","list","map","listItem","App","tasksInitialState","filtersInitialState","rootReducer","combineReducers","action","enhancer","devToolsEnhancer","store","createStore","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4715b602.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"isSelected\":\"Button_isSelected__2JVMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"TaskCounter_text__3WbH2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__1kzwH\",\"field\":\"TaskForm_field__8trCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TaskList_list__2xVr5\",\"listItem\":\"TaskList_listItem__XeAAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1nNA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StatusFilter_wrapper__1VEdi\"};","import css from \"./Layout.module.css\";\n\nexport const Layout = ({ children }) => {\n  return <main className={css.container}>{children}</main>;\n};\n","import clsx from \"clsx\";\nimport css from \"./Button.module.css\";\n\nexport const Button = ({\n  selected = false,\n  type = \"button\",\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n","export const statusFilters = Object.freeze({\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n});\n","export const getTasks = state => state.tasks;\n\nexport const getStatusFilter = state => state.filters.status;\n","import { Button } from 'components/Button/Button';\nimport css from './StatusFilter.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/actions';\nimport { statusFilters } from 'redux/constants';\nimport { getStatusFilter } from 'redux/selectors';\n\nexport const StatusFilter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(getStatusFilter);\n\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n\n  return (\n    <div className={css.wrapper}>\n      <Button\n        selected={filter === statusFilters.all}\n        onClick={() => handleFilterChange(statusFilters.all)}\n      >\n        All\n      </Button>\n      <Button\n        selected={filter === statusFilters.active}\n        onClick={() => handleFilterChange(statusFilters.active)}\n      >\n        Active\n      </Button>\n      <Button\n        selected={filter === statusFilters.completed}\n        onClick={() => handleFilterChange(statusFilters.completed)}\n      >\n        Completed\n      </Button>\n    </div>\n  );\n};\n","import { nanoid } from 'nanoid';\n\nexport const addTask = text => {\n  return {\n    type: 'tasks/addTask',\n    payload: {\n      id: nanoid(),\n      completed: false,\n      text,\n    },\n  };\n};\n\nexport const deleteTask = taskId => {\n  return {\n    type: 'tasks/deleteTask',\n    payload: taskId,\n  };\n};\n\nexport const toggleCompleted = taskId => {\n  return {\n    type: 'tasks/toggleCompleted',\n    payload: taskId,\n  };\n};\n\nexport const setStatusFilter = value => {\n  return {\n    type: 'filter/setStatusFilter',\n    payload: value,\n  };\n};\n","import css from './TaskCounter.module.css';\nimport { useSelector } from 'react-redux';\nimport { getTasks } from 'redux/selectors';\n\nexport const TaskCounter = () => {\n  const tasks = useSelector(getTasks);\n\n  const count = tasks.reduce(\n    (acc, task) => {\n      if (task.completed) {\n        acc.completed += 1;\n      } else {\n        acc.active += 1;\n      }\n      return acc;\n    },\n    { active: 0, completed: 0 }\n  );\n\n  return (\n    <div>\n      <p className={css.text}>Active: {count.active}</p>\n      <p className={css.text}>Completed: {count.completed}</p>\n    </div>\n  );\n};\n","import { StatusFilter } from \"components/StatusFilter/StatusFilter\";\nimport { TaskCounter } from \"components/TaskCounter/TaskCounter\";\nimport css from \"./AppBar.module.css\";\n\nexport const AppBar = () => {\n  return (\n    <header className={css.wrapper}>\n      <section className={css.section}>\n        <h2 className={css.title}>Tasks</h2>\n        <TaskCounter />\n      </section>\n      <section className={css.section}>\n        <h2 className={css.title}>Filter by status</h2>\n        <StatusFilter />\n      </section>\n    </header>\n  );\n};\n","import { Button } from 'components/Button/Button';\nimport css from './TaskForm.module.css';\n\nimport { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/actions';\n\nexport const TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    dispatch(addTask(form.elements.text.value));\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.field}\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter task text...\"\n      />\n      <Button type=\"submit\">Add task</Button>\n    </form>\n  );\n};\n","import { MdClose } from 'react-icons/md';\nimport css from './Task.module.css';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteTask, toggleCompleted } from 'redux/actions';\n\nexport const Task = ({ task }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteTask(task.id));\n  const handleToggle = () => dispatch(toggleCompleted(task.id));\n\n  return (\n    <div className={css.wrapper}>\n      <input\n        type=\"checkbox\"\n        className={css.checkbox}\n        checked={task.completed}\n        onChange={handleToggle}\n      />\n      <p className={css.text}>{task.text}</p>\n      <button className={css.btn} type=\"button\" onClick={handleDelete}>\n        <MdClose size={24} />\n      </button>\n    </div>\n  );\n};\n","import { Task } from 'components/Task/Task';\nimport css from './TaskList.module.css';\n\nimport { useSelector } from 'react-redux';\nimport { statusFilters } from 'redux/constants';\nimport { getStatusFilter } from 'redux/selectors';\nimport { getTasks } from 'redux/selectors';\n\nconst getVisibleTasks = (tasks, statusFilter) => {\n  switch (statusFilter) {\n    case statusFilters.active:\n      return tasks.filter(task => !task.completed);\n    case statusFilters.completed:\n      return tasks.filter(task => task.completed);\n    default:\n      return tasks;\n  }\n};\n\nexport const TaskList = () => {\n  const tasks = useSelector(getTasks);\n  const statusFilter = useSelector(getStatusFilter);\n  const visibleTasks = getVisibleTasks(tasks, statusFilter);\n\n  return (\n    <ul className={css.list}>\n      {visibleTasks.map(task => (\n        <li className={css.listItem} key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Layout } from \"components/Layout/Layout\";\nimport { AppBar } from \"components/AppBar/AppBar\";\nimport { TaskForm } from \"components/TaskForm/TaskForm\";\nimport { TaskList } from \"components/TaskList/TaskList\";\n\nexport const App = () => {\n  return (\n    <Layout>\n      <AppBar />\n      <TaskForm />\n      <TaskList />\n    </Layout>\n  );\n};\n","import { statusFilters } from './constants';\nimport { combineReducers } from 'redux';\n\nconst tasksInitialState = [\n  { id: 0, text: 'Learn HTML and CSS', completed: true },\n  { id: 1, text: 'Get good at JavaScript', completed: true },\n  { id: 2, text: 'Master React', completed: false },\n  { id: 3, text: 'Discover Redux', completed: false },\n  { id: 4, text: 'Build amazing apps', completed: false },\n];\n\nconst tasksReducer = (state = tasksInitialState, action) => {\n  switch (action.type) {\n    case 'tasks/addTask':\n      return [...state, action.payload];\n    case 'tasks/deleteTask':\n      return state.filter(task => task.id !== action.payload);\n    case 'tasks/toggleCompleted':\n      return state.map(task => {\n        if (task.id !== action.payload) {\n          return task;\n        }\n        return { ...task, completed: !task.completed };\n      });\n    default:\n      return state;\n  }\n};\n\nconst filtersInitialState = {\n  status: statusFilters.all,\n};\n\nconst filterReducer = (state = filtersInitialState, action) => {\n  switch (action.type) {\n    case 'filter/setStatusFilter':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n// export const rootReducer = (state = {}, action) => {\n//   return {\n//     tasks: tasksReducer(state.tasks, action),\n//     filters: filterReducer(state.filters, action),\n//   };\n// };\n\nexport const rootReducer = combineReducers({\n  tasks: tasksReducer,\n  filters: filterReducer,\n});\n\n// const initialState = {\n//   tasks: [\n//     { id: 0, text: 'Learn HTML and CSS', completed: true },\n//     { id: 1, text: 'Get good at JavaScript', completed: true },\n//     { id: 2, text: 'Master React', completed: false },\n//     { id: 3, text: 'Discover Redux', completed: false },\n//     { id: 4, text: 'Build amazing apps', completed: false },\n//   ],\n//   filters: {\n//     status: statusFilters.all,\n//   },\n// };\n\n// export const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'tasks/addTask':\n//       return {\n//         ...state,\n//         tasks: [...state.tasks, action.payload],\n//       };\n//     case 'tasks/deleteTask':\n//       return {\n//         ...state,\n//         tasks: state.tasks.filter(task => task.id !== action.payload),\n//       };\n\n//     case 'tasks/toggleCompleted':\n//       return {\n//         ...state,\n//         tasks: state.tasks.map(task => {\n//           if (task.id !== action.payload) {\n//             return task;\n//           }\n//           return { ...task, completed: !task.completed };\n//         }),\n//       };\n\n//     case 'filter/setStatusFilter':\n//       return {\n//         ...state,\n//         filter: {\n//           ...state.filters,\n//           status: action.payload,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n","import { legacy_createStore as createStore } from 'redux';\nimport { devToolsEnhancer } from '@redux-devtools/extension';\nimport { rootReducer } from './reducer';\n\n// const initialState = {\n//   tasks: [\n//     { id: 0, text: 'Learn HTML and CSS', completed: true },\n//     { id: 1, text: 'Get good at JavaScript', completed: true },\n//     { id: 2, text: 'Master React', completed: false },\n//     { id: 3, text: 'Discover Redux', completed: false },\n//     { id: 4, text: 'Build amazing apps', completed: false },\n//   ],\n//   filters: {\n//     status: 'all',\n//   },\n// };\n\n// const rootReducer = (state = initialState, action) => {\n//   return state;\n// };\n\nconst enhancer = devToolsEnhancer();\n\nexport const store = createStore(rootReducer, enhancer);\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from 'components/App';\nimport './index.css';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppBar_wrapper__21lfN\",\"section\":\"AppBar_section__3Iy4s\",\"title\":\"AppBar_title__JfHv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Task_wrapper__1Un4J\",\"text\":\"Task_text__7szr-\",\"btn\":\"Task_btn__2cnNo\",\"checkbox\":\"Task_checkbox__1kBaq\"};"],"sourceRoot":""}